openapi: 3.0.0
info:
  title: Mock API with JWT Auth
  version: 0.1.0
paths:

  /api/resources:
    get:
      summary: Get a list of resources ( user role required )
      responses:
        '200':
          description: List of resources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      summary: Create a new resource ( user role required )
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Resource created successfully
  /api/resources/{resourceId}:
    get:
      summary: Get resource by ID ( user role required )
      security:
        - jwt: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Resource details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    put:
      summary: Update resource by ID ( user role required )
      security:
        - jwt: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
    delete:
      summary: Delete resource by ID ( user role required )
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Resource deleted successfully
  /api/auth/login:
    post:
      summary: Authenticate user and get JWT token
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
  /api/users:
    get:
      summary: Get a list of users (Superadmin role required)
      security:
        - jwt: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user (Superadmin role required)
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
  /api/users/{userId}:
    get:
      summary: Get user by ID (Superadmin role required)
      security:
        - jwt: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user by ID (Superadmin role required)
      security:
        - jwt: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
    delete:
      summary: Delete user by ID (Superadmin role required)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
          
    
  '/mock/{resourceName}':
    parameters:
      - name: resourceName
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Process requests based on resource attributes
      parameters:
        - name: filter
          in: query
          schema:
            type: boolean
        - name: pagination
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: boolean
        - name: validation
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Processed response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object
      x-endpoint-facade: true
    
    post:
      summary: Process POST requests based on resource attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceDescription'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    put:
      summary: Process PUT requests based on resource attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceDescription'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    delete:
      summary: Process DELETE requests based on resource attributes
      responses:
        '204':
          description: Resource deleted successfully
  
  '/data/':
    get:
      summary: List mock data related to a resource
      responses:
        '200':
          description: Processed response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResourceMockData'

    post:
      summary: Process POST requests based on resource attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceMockData'
      responses:
        '201':
          description: Resource mock data created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    put:
      summary: Process PUT requests to edit mock data for a resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceMockData'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    delete:
      summary: Process DELETE requests based on resource attributes
      parameters:
        - name: filter
          in: query
          schema:
            type: boolean
        - name: pagination
          in: query
          schema:
            type: boolean
        - name: search
          in: query
          schema:
            type: boolean
        - name: validation
          in: query
          schema:
            type: boolean
      responses:
        '204':
          description: Resource deleted successfully
          


  '/project/':
    get:
      summary: List all user projects
      responses:
        '200':
          description: Processed response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'

    post:
      summary: create user project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    put:
      summary: Process PUT requests to edit user projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  data:
                    type: object

    delete:
      summary: Process DELETE project
      responses:
        '204':
          description: Resource deleted successfully
      
    
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - resourceName
        - method
        - username
        - password
        
    Resource:
      type: object
      properties:
        project:
          $ref: '#/components/schemas/Project'
        resourceName:
          type: string
        method:
          type: string
          enum: [GET, POST, DELETE, PUT]
        filter:
          type: boolean
        pagination:
          type: boolean
        search:
          type: boolean
        validation:
          type: boolean
        filterFunc:
          type: string
        paginationFunc:
          type: string
        searchFunc:
          type: string
        validationFunc:
          type: string
      required:
        - resourceName
        - method
        
    ResourceDescription:
      type: object
      properties:
        resourceName:
          type: string
        method:
          type: string
          enum: [GET, POST, DELETE, PUT]
        filter:
          type: boolean
        pagination:
          type: boolean
        search:
          type: boolean
        validation:
          type: boolean
        filterFunc:
          type: string
        paginationFunc:
          type: string
        searchFunc:
          type: string
        validationFunc:
          type: string
      required:
        - resourceName
        - method
        
    ResourceMockData:
      type: object
      properties:
        resource:
          $ref: '#/components/schemas/ResourceDescription'
        data:
          type: object
          
    Project:
      type: object
      properties:
        name:
          type: string
        _id:
          type: string
        user:
          type: string
        
